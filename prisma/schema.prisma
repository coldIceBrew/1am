// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  podcasts      Podcast[]

  @@map("users")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Podcast {
  id          Int      @id @default(autoincrement())
  authorId    Int
  producer    String
  title       String
  description String?  @db.Text
  category    String?
  subCategory String?  @map("sub_category")
  artwork     String?
  explicit    Boolean  @default(false)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Episode Episode[]

  @@map("podcasts")
}

model Episode {
  id          Int       @id @default(autoincrement())
  podcastId   Int       @map("podcast_id")
  title       String
  description String?   @db.Text
  audio       String?
  explicit    Boolean   @default(false)
  publishedAt DateTime? @map("published_at")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")

  podcast Podcast @relation(fields: [podcastId], references: [id], onDelete: Cascade)

  @@map("episodes")
}
